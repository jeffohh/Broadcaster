--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Unreliable[0] = table.create(256)
Queue.Unreliable[1] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
export type Viewer_Action = { Action: "View", Player: Player } | { Action: "Leave",  }
export type Streamer_Action = ("Online" | "Offline")
local function Viewer_ReadEVENT_Request(): ({ { Action: "View", Player: Player } | { Action: "Leave",  } })
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	-- START ARRAY
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	if Length < 0 then error(`Expected "Length" to be larger than 0, got {Length} instead.`) end
	if Length > 65535 then error(`Expected "Length" to be smaller than 65535, got {Length} instead.`) end
	local Value1 = table.create(Length)
		-- Read BLOCK: 1 bytes
	local ARRAY_START_1 = Read(1 * Length)
	for Index = 1, Length do
		-- Read 1
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 1
		local Tag = buffer.readu8(RecieveBuffer, OPERATION_OFFSET_0)
		local Item_1 = true :: any
		if Tag == 0 then
			Item_1 = {} :: any
			RecieveInstanceCursor += 1
			Item_1.Player = RecieveInstances[RecieveInstanceCursor]
			if typeof(Item_1.Player) ~= "Instance" then error(`Expected an Instance, got {typeof(Item_1.Player)} instead.`) end
			if not Item_1.Player:IsA("Player") then error(`Expected an Instance of type "Player", got "{Item_1.Player.ClassName}" instead.`) end
			Item_1.Action = "View"
		elseif Tag == 1 then
			Item_1 = {} :: any
			Item_1.Action = "Leave"
		else
			error(`Unexpected variant: {Tag}`)
		end
		table.insert(Value1, Item_1)
	end
	-- END ARRAY
	return Value1
end

local function Streamer_WriteEVENT_Request(Value1: { ("Online" | "Offline") }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value1)
		-- Allocate BLOCK: 1 bytes
	local ARRAY_START_1 = Allocate(1 * #Value1)
	for Index = 1, #Value1 do
		local Item_1 = Value1[Index]
		-- Allocate 1
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 1
		if Item_1 == "Online" then
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 0)
		elseif Item_1 == "Offline" then
			buffer.writeu8(SendBuffer, OPERATION_OFFSET_0, 1)
		else
			error(`Unexpected enum: {Item_1}, expected one of "Online" or "Offline".`)
		end
	end
	-- END ARRAY
end

local function Streamer_ReadEVENT_Camera(): (CFrame)
	-- Read BLOCK: 24 bytes
	local BLOCK_START = Read(24)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	local Value1 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	return Value1
end

local function Streamer_ReadEVENT_MousePosition(): (number, number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value2 = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	return Value1, Value2
end

local function Streamer_ReadEVENT_ViewportSize(): (number, number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value2 = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	return Value1, Value2
end

local function Streamer_ReadEVENT_MouseIcon(): (string)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	local Value1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if #Value1 < 0 then error(`Expected length of "Value1" to be larger than 0, got {#Value1} instead.`) end
	if #Value1 > 255 then error(`Expected length of "Value1" to be smaller than 255, got {#Value1} instead.`) end
	return Value1
end

local function Streamer_ReadEVENT_MouseTarget(): (BasePart?, Vector3?)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Value1
	RecieveInstanceCursor += 1
	if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
		RecieveInstanceCursor -= 1
		RecieveInstanceCursor += 1
		Value1 = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value1) ~= "Instance" then error(`Expected an Instance, got {typeof(Value1)} instead.`) end
		if not Value1:IsA("BasePart") then error(`Expected an Instance of type "BasePart", got "{Value1.ClassName}" instead.`) end
	end
	local Value2
	if buffer.readu8(RecieveBuffer, BLOCK_START + 0) == 1 then
		-- Read BLOCK: 12 bytes
		local BLOCK_START = Read(12)
		local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
		local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
		local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
		Value2 = Vector3.new(X, Y, Z)
	end
	return Value1, Value2
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Viewer = {
		Request = {
			On = NOOP
		},
	},
	Streamer = {
		Request = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		Camera = {
			On = NOOP
		},
		MousePosition = {
			On = NOOP
		},
		ViewportSize = {
			On = NOOP
		},
		MouseIcon = {
			On = NOOP
		},
		MouseTarget = {
			On = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value1: { { Action: "View", Player: Player } | { Action: "Leave",  } } = Viewer_ReadEVENT_Request()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Player, Value1)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"Request\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value1} :: {any})
			end
		elseif Index == 2 then
			local Value1: number, Value2: number = Streamer_ReadEVENT_ViewportSize()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Player, Value1, Value2)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"ViewportSize\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Player, Value1, Value2} :: {any})
			end
		elseif Index == 3 then
			local Value1: string = Streamer_ReadEVENT_MouseIcon()
			if Events.Reliable[3] ~= nil then
				Events.Reliable[3](Player, Value1)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"MouseIcon\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Player, Value1} :: {any})
			end
		elseif Index == 4 then
			local Value1: BasePart?, Value2: Vector3? = Streamer_ReadEVENT_MouseTarget()
			if Events.Reliable[4] ~= nil then
				Events.Reliable[4](Player, Value1, Value2)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"MouseTarget\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Player, Value1, Value2} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value1: CFrame = Streamer_ReadEVENT_Camera()
			if Events.Unreliable[0] ~= nil then
				Events.Unreliable[0](Player, Value1)
			end
		elseif Index == 1 then
			local Value1: number, Value2: number = Streamer_ReadEVENT_MousePosition()
			if Events.Unreliable[1] ~= nil then
				Events.Unreliable[1](Player, Value1, Value2)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Viewer = {
		Request = {
			On = function(Listener: (Player: Player, Value1: { { Action: "View", Player: Player } | { Action: "Leave",  } }) -> ()): () -> ()
				Events.Reliable[0] = Listener
				for Index, Arguments in Queue.Reliable[0] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					if Events.Reliable[0] == Listener then
						Events.Reliable[0] = nil
					end
				end
			end
		},
	},
	Streamer = {
		Request = {
			Fire = function(Player: Player, Value1: { ("Online" | "Offline") }): ()
				Load(PlayersMap[Player])
				Streamer_WriteEVENT_Request(Value1)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value1: { ("Online" | "Offline") }): ()
				Load()
				Streamer_WriteEVENT_Request(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value1: { ("Online" | "Offline") }): ()
				Load()
				Streamer_WriteEVENT_Request(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value1: { ("Online" | "Offline") }): ()
				Load()
				Streamer_WriteEVENT_Request(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		Camera = {
			On = function(Listener: (Player: Player, Value1: CFrame) -> ()): () -> ()
				Events.Unreliable[0] = Listener
				return function (): ()
					if Events.Unreliable[0] == Listener then
						Events.Unreliable[0] = nil
					end
				end
			end
		},
		MousePosition = {
			On = function(Listener: (Player: Player, Value1: number, Value2: number) -> ()): () -> ()
				Events.Unreliable[1] = Listener
				return function (): ()
					if Events.Unreliable[1] == Listener then
						Events.Unreliable[1] = nil
					end
				end
			end
		},
		ViewportSize = {
			On = function(Listener: (Player: Player, Value1: number, Value2: number) -> ()): () -> ()
				Events.Reliable[2] = Listener
				for Index, Arguments in Queue.Reliable[2] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[2] = {}
				return function (): ()
					if Events.Reliable[2] == Listener then
						Events.Reliable[2] = nil
					end
				end
			end
		},
		MouseIcon = {
			On = function(Listener: (Player: Player, Value1: string) -> ()): () -> ()
				Events.Reliable[3] = Listener
				for Index, Arguments in Queue.Reliable[3] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[3] = {}
				return function (): ()
					if Events.Reliable[3] == Listener then
						Events.Reliable[3] = nil
					end
				end
			end
		},
		MouseTarget = {
			On = function(Listener: (Player: Player, Value1: BasePart?, Value2: Vector3?) -> ()): () -> ()
				Events.Reliable[4] = Listener
				for Index, Arguments in Queue.Reliable[4] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[4] = {}
				return function (): ()
					if Events.Reliable[4] == Listener then
						Events.Reliable[4] = nil
					end
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL