--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Unreliable[1] = table.create(256)
Queue.Reliable[5] = table.create(256)
Queue.Reliable[6] = table.create(256)
export type Viewer_RequestAction = { Action: "View", Player: Player } | { Action: "Leave",  } | { Action: "Logs",  }
export type Viewer_WatchAction = ("Start" | "Stop")
export type Viewer_LogEntry = { DateFormat: string, Message: string }
export type Streamer_Action = ("Start" | "Stop")
export type Streamer_MouseTargetInfo = { Info: "Valid", Target: BasePart?, Parent: Instance?, Size: Vector3, FullName: string } | { Info: "None",  }
local function Viewer_ReadEVENT_Request(): ({ Action: "View", Player: Player } | { Action: "Leave",  } | { Action: "Logs",  })
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Tag = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	local Value = true :: any
	if Tag == 0 then
		Value = {} :: any
		RecieveInstanceCursor += 1
		Value.Player = RecieveInstances[RecieveInstanceCursor]
		if typeof(Value.Player) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Player)} instead.`) end
		if not Value.Player:IsA("Player") then error(`Expected an Instance of type "Player", got "{Value.Player.ClassName}" instead.`) end
		Value.Action = "View"
	elseif Tag == 1 then
		Value = {} :: any
		Value.Action = "Leave"
	elseif Tag == 2 then
		Value = {} :: any
		Value.Action = "Logs"
	else
		error(`Unexpected variant: {Tag}`)
	end
	return Value
end

local function Viewer_WriteEVENT_Watch(Value: ("Start" | "Stop")): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	if Value == "Start" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value == "Stop" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	else
		error(`Unexpected enum: {Value}, expected one of "Start" or "Stop".`)
	end
end

local function Viewer_WriteEVENT_Log(Value: { { DateFormat: string, Message: string } }): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	-- START ARRAY
	buffer.writeu16(SendBuffer, BLOCK_START + 1, #Value)
		-- Allocate BLOCK: 21 bytes
	local ARRAY_START_1 = Allocate(21 * #Value)
	for Index = 1, #Value do
		local Item_1 = Value[Index]
		-- Allocate 19
		local OPERATION_OFFSET_0 = ARRAY_START_1
		ARRAY_START_1 += 19
		buffer.writestring(SendBuffer, OPERATION_OFFSET_0, Item_1.DateFormat, 19)
		local Length = #Item_1.Message
		-- Allocate 2
		local OPERATION_OFFSET_1 = ARRAY_START_1
		ARRAY_START_1 += 2
		buffer.writeu16(SendBuffer, OPERATION_OFFSET_1, Length)
		Allocate(Length)
		buffer.writestring(SendBuffer, SendOffset, Item_1.Message, Length)
	end
	-- END ARRAY
end

local function Viewer_WriteEVENT_Screen(Value1: number, Value2: CFrame, Value3: Vector3): ()
	-- Allocate BLOCK: 41 bytes
	local BLOCK_START = Allocate(41)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	buffer.writef32(SendBuffer, BLOCK_START + 1, Value1)
	local Vector = Value2.Position
	buffer.writef32(SendBuffer, BLOCK_START + 5, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 9, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 13, Vector.Z)
	local rX, rY, rZ = Value2:ToOrientation()
	buffer.writef32(SendBuffer, BLOCK_START + 17, rX)
	buffer.writef32(SendBuffer, BLOCK_START + 21, rY)
	buffer.writef32(SendBuffer, BLOCK_START + 25, rZ)
	local Vector = Value3
	buffer.writef32(SendBuffer, BLOCK_START + 29, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 33, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 37, Vector.Z)
end

local function Viewer_WriteEVENT_MouseIcon(Value1: string): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	local Length = #Value1
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value1, Length)
end

local function Streamer_WriteEVENT_Request(Value: ("Start" | "Stop")): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 4)
	if Value == "Start" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
	elseif Value == "Stop" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	else
		error(`Unexpected enum: {Value}, expected one of "Start" or "Stop".`)
	end
end

local function Streamer_ReadEVENT_Screen(): (number, CFrame, Vector3)
	-- Read BLOCK: 40 bytes
	local BLOCK_START = Read(40)
	local Value1 = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 24)
	local Value2 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 28)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 32)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 36)
	local Value3 = Vector3.new(X, Y, Z)
	return Value1, Value2, Value3
end

local function Streamer_ReadEVENT_MouseIcon(): (string)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if #Value1 < 0 then error(`Expected length of "Value1" to be larger than 0, got {#Value1} instead.`) end
	if #Value1 > 256 then error(`Expected length of "Value1" to be smaller than 256, got {#Value1} instead.`) end
	return Value1
end

local function Streamer_ReadEVENT_MouseTarget(): ({ Info: "Valid", Target: BasePart?, Parent: Instance?, Size: Vector3, FullName: string } | { Info: "None",  })
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Tag = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	local Value = true :: any
	if Tag == 0 then
		-- Read BLOCK: 14 bytes
		local BLOCK_START = Read(14)
		Value = {} :: any
		RecieveInstanceCursor += 1
		if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
			RecieveInstanceCursor -= 1
			RecieveInstanceCursor += 1
			Value.Target = RecieveInstances[RecieveInstanceCursor]
			if typeof(Value.Target) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Target)} instead.`) end
			if not Value.Target:IsA("BasePart") then error(`Expected an Instance of type "BasePart", got "{Value.Target.ClassName}" instead.`) end
		end
		RecieveInstanceCursor += 1
		if typeof(RecieveInstances[RecieveInstanceCursor]) == "Instance" then
			RecieveInstanceCursor -= 1
			RecieveInstanceCursor += 1
			Value.Parent = RecieveInstances[RecieveInstanceCursor]
			if typeof(Value.Parent) ~= "Instance" then error(`Expected an Instance, got {typeof(Value.Parent)} instead.`) end
			if not Value.Parent:IsA("Instance") then error(`Expected an Instance of type "Instance", got "{Value.Parent.ClassName}" instead.`) end
		end
		local X = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
		local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
		local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
		Value.Size = Vector3.new(X, Y, Z)
		local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 12)
		Value.FullName = buffer.readstring(RecieveBuffer, Read(Length), Length)
		if #Value.FullName < 0 then error(`Expected length of "Value.FullName" to be larger than 0, got {#Value.FullName} instead.`) end
		if #Value.FullName > 512 then error(`Expected length of "Value.FullName" to be smaller than 512, got {#Value.FullName} instead.`) end
		Value.Info = "Valid"
	elseif Tag == 1 then
		Value = {} :: any
		Value.Info = "None"
	else
		error(`Unexpected variant: {Tag}`)
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Viewer = {
		Request = {
			On = NOOP
		},
		Watch = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		Log = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		Screen = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		MouseIcon = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
	},
	Streamer = {
		Request = {
			Fire = NOOP,
			FireAll = NOOP,
			FireList = NOOP,
			FireExcept = NOOP
		},
		Screen = {
			On = NOOP
		},
		MouseIcon = {
			On = NOOP
		},
		MouseTarget = {
			On = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: { Action: "View", Player: Player } | { Action: "Leave",  } | { Action: "Logs",  } = Viewer_ReadEVENT_Request()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Player, Value)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"Request\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Player, Value} :: {any})
			end
		elseif Index == 5 then
			local Value1: string = Streamer_ReadEVENT_MouseIcon()
			if Events.Reliable[5] ~= nil then
				Events.Reliable[5](Player, Value1)
			else
				if #Queue.Reliable[5] > 256 then
					warn("[Blink]: Event queue of \"MouseIcon\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[5], {Player, Value1} :: {any})
			end
		elseif Index == 6 then
			local Value: { Info: "Valid", Target: BasePart?, Parent: Instance?, Size: Vector3, FullName: string } | { Info: "None",  } = Streamer_ReadEVENT_MouseTarget()
			if Events.Reliable[6] ~= nil then
				Events.Reliable[6](Player, Value)
			else
				if #Queue.Reliable[6] > 256 then
					warn("[Blink]: Event queue of \"MouseTarget\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[6], {Player, Value} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			local Value1: number, Value2: CFrame, Value3: Vector3 = Streamer_ReadEVENT_Screen()
			if Events.Unreliable[1] ~= nil then
				Events.Unreliable[1](Player, Value1, Value2, Value3)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Viewer = {
		Request = {
			On = function(Listener: (Player: Player, Value: { Action: "View", Player: Player } | { Action: "Leave",  } | { Action: "Logs",  }) -> ()): () -> ()
				Events.Reliable[0] = Listener
				for Index, Arguments in Queue.Reliable[0] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[0] = {}
				return function (): ()
					if Events.Reliable[0] == Listener then
						Events.Reliable[0] = nil
					end
				end
			end
		},
		Watch = {
			Fire = function(Player: Player, Value: ("Start" | "Stop")): ()
				Load(PlayersMap[Player])
				Viewer_WriteEVENT_Watch(Value)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value: ("Start" | "Stop")): ()
				Load()
				Viewer_WriteEVENT_Watch(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value: ("Start" | "Stop")): ()
				Load()
				Viewer_WriteEVENT_Watch(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value: ("Start" | "Stop")): ()
				Load()
				Viewer_WriteEVENT_Watch(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		Log = {
			Fire = function(Player: Player, Value: { { DateFormat: string, Message: string } }): ()
				Load(PlayersMap[Player])
				Viewer_WriteEVENT_Log(Value)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value: { { DateFormat: string, Message: string } }): ()
				Load()
				Viewer_WriteEVENT_Log(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value: { { DateFormat: string, Message: string } }): ()
				Load()
				Viewer_WriteEVENT_Log(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value: { { DateFormat: string, Message: string } }): ()
				Load()
				Viewer_WriteEVENT_Log(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		Screen = {
			Fire = function(Player: Player, Value1: number, Value2: CFrame, Value3: Vector3): ()
				Load()
				Viewer_WriteEVENT_Screen(Value1, Value2, Value3)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				Unreliable:FireClient(Player, Buffer, SendInstances)
			end,
			FireAll = function(Value1: number, Value2: CFrame, Value3: Vector3): ()
				Load()
				Viewer_WriteEVENT_Screen(Value1, Value2, Value3)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				Unreliable:FireAllClients(Buffer, SendInstances)
			end,
			FireList = function(List: {Player}, Value1: number, Value2: CFrame, Value3: Vector3): ()
				Load()
				Viewer_WriteEVENT_Screen(Value1, Value2, Value3)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				for _, Player in List do
					Unreliable:FireClient(Player, Buffer, SendInstances)
				end
			end,
			FireExcept = function(Except: Player, Value1: number, Value2: CFrame, Value3: Vector3): ()
				Load()
				Viewer_WriteEVENT_Screen(Value1, Value2, Value3)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Unreliable:FireClient(Player, Buffer, SendInstances)
				end
			end,
		},
		MouseIcon = {
			Fire = function(Player: Player, Value1: string): ()
				Load(PlayersMap[Player])
				Viewer_WriteEVENT_MouseIcon(Value1)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value1: string): ()
				Load()
				Viewer_WriteEVENT_MouseIcon(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value1: string): ()
				Load()
				Viewer_WriteEVENT_MouseIcon(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value1: string): ()
				Load()
				Viewer_WriteEVENT_MouseIcon(Value1)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
	},
	Streamer = {
		Request = {
			Fire = function(Player: Player, Value: ("Start" | "Stop")): ()
				Load(PlayersMap[Player])
				Streamer_WriteEVENT_Request(Value)
				PlayersMap[Player] = Save()
			end,
			FireAll = function(Value: ("Start" | "Stop")): ()
				Load()
				Streamer_WriteEVENT_Request(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireList = function(List: {Player}, Value: ("Start" | "Stop")): ()
				Load()
				Streamer_WriteEVENT_Request(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in List do
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
			FireExcept = function(Except: Player, Value: ("Start" | "Stop")): ()
				Load()
				Streamer_WriteEVENT_Request(Value)
				local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
				for _, Player in Players:GetPlayers() do
					if Player == Except then
						continue
					end
					Load(PlayersMap[Player])
					local Position = Allocate(Size)
					buffer.copy(SendBuffer, Position, Buffer, 0, Size)
					table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
					PlayersMap[Player] = Save()
				end
			end,
		},
		Screen = {
			On = function(Listener: (Player: Player, Value1: number, Value2: CFrame, Value3: Vector3) -> ()): () -> ()
				Events.Unreliable[1] = Listener
				return function (): ()
					if Events.Unreliable[1] == Listener then
						Events.Unreliable[1] = nil
					end
				end
			end
		},
		MouseIcon = {
			On = function(Listener: (Player: Player, Value1: string) -> ()): () -> ()
				Events.Reliable[5] = Listener
				for Index, Arguments in Queue.Reliable[5] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[5] = {}
				return function (): ()
					if Events.Reliable[5] == Listener then
						Events.Reliable[5] = nil
					end
				end
			end
		},
		MouseTarget = {
			On = function(Listener: (Player: Player, Value: { Info: "Valid", Target: BasePart?, Parent: Instance?, Size: Vector3, FullName: string } | { Info: "None",  }) -> ()): () -> ()
				Events.Reliable[6] = Listener
				for Index, Arguments in Queue.Reliable[6] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[6] = {}
				return function (): ()
					if Events.Reliable[6] == Listener then
						Events.Reliable[6] = nil
					end
				end
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL