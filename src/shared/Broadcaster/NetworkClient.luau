--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.4 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[1] = table.create(256)
Events.Unreliable[0] = {}
Queue.Unreliable[0] = table.create(256)
Events.Reliable[2] = {}
Queue.Reliable[2] = table.create(256)
Events.Reliable[3] = {}
Queue.Reliable[3] = table.create(256)
Queue.Reliable[4] = table.create(256)
export type Viewer_RequestAction = { Action: "View", Player: Player } | { Action: "Leave",  }
export type Viewer_WatchAction = ("StartWatch" | "EndWatch")
export type Streamer_Action = ("StartStream" | "EndStream")
local function Viewer_WriteEVENT_Request(Value: { Action: "View", Player: Player } | { Action: "Leave",  }): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	if Value.Action == "View" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 0)
		table.insert(SendInstances, Value.Player or Null)
	elseif Value.Action == "Leave" then
		buffer.writeu8(SendBuffer, BLOCK_START + 1, 1)
	else
		error(`Unexpected variant: {Value.Action}`)
	end
end

local function Viewer_ReadEVENT_Watch(): (("StartWatch" | "EndWatch"))
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Value = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value = "StartWatch"
	elseif Index == 1 then
		Value = "EndWatch"
	else
		error(`Unexpected enum: {Index}`)
	end
	return Value
end

local function Viewer_ReadEVENT_Screen(): (number, CFrame, Vector3)
	-- Read BLOCK: 40 bytes
	local BLOCK_START = Read(40)
	local Value1 = buffer.readf32(RecieveBuffer, BLOCK_START + 0)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	local Position = Vector3.new(X, Y, Z)
	local rX = buffer.readf32(RecieveBuffer, BLOCK_START + 16)
	local rY = buffer.readf32(RecieveBuffer, BLOCK_START + 20)
	local rZ = buffer.readf32(RecieveBuffer, BLOCK_START + 24)
	local Value2 = CFrame.new(Position) * CFrame.fromOrientation(rX, rY, rZ)
	X = buffer.readf32(RecieveBuffer, BLOCK_START + 28)
	Y = buffer.readf32(RecieveBuffer, BLOCK_START + 32)
	Z = buffer.readf32(RecieveBuffer, BLOCK_START + 36)
	local Value3 = Vector3.new(X, Y, Z)
	return Value1, Value2, Value3
end

local function Viewer_ReadEVENT_ViewportSize(): (number, number)
	-- Read BLOCK: 4 bytes
	local BLOCK_START = Read(4)
	local Value1 = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value2 = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	return Value1, Value2
end

local function Viewer_ReadEVENT_MouseIcon(): (string)
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Length = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	local Value1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	if #Value1 < 0 then error(`Expected length of "Value1" to be larger than 0, got {#Value1} instead.`) end
	if #Value1 > 255 then error(`Expected length of "Value1" to be smaller than 255, got {#Value1} instead.`) end
	return Value1
end

local function Streamer_ReadEVENT_Request(): (("StartStream" | "EndStream"))
	-- Read BLOCK: 1 bytes
	local BLOCK_START = Read(1)
	local Value = true :: any
	local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	if Index == 0 then
		Value = "StartStream"
	elseif Index == 1 then
		Value = "EndStream"
	else
		error(`Unexpected enum: {Index}`)
	end
	return Value
end

local function Streamer_WriteEVENT_Screen(Value1: number, Value2: CFrame, Value3: Vector3): ()
	-- Allocate BLOCK: 41 bytes
	local BLOCK_START = Allocate(41)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writef32(SendBuffer, BLOCK_START + 1, Value1)
	local Vector = Value2.Position
	buffer.writef32(SendBuffer, BLOCK_START + 5, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 9, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 13, Vector.Z)
	local rX, rY, rZ = Value2:ToOrientation()
	buffer.writef32(SendBuffer, BLOCK_START + 17, rX)
	buffer.writef32(SendBuffer, BLOCK_START + 21, rY)
	buffer.writef32(SendBuffer, BLOCK_START + 25, rZ)
	local Vector = Value3
	buffer.writef32(SendBuffer, BLOCK_START + 29, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 33, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 37, Vector.Z)
end

local function Streamer_WriteEVENT_MouseIcon(Value1: string): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 5)
	local Length = #Value1
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value1, Length)
end

local function Streamer_WriteEVENT_MouseTarget(Value1: BasePart?, Value2: Vector3?): ()
	-- Allocate BLOCK: 2 bytes
	local BLOCK_START = Allocate(2)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 6)
	table.insert(SendInstances, Value1 or Null)
	buffer.writeu8(SendBuffer, BLOCK_START + 1, Value2 ~= nil and 1 or 0)
	if Value2 ~= nil then
		-- Allocate BLOCK: 12 bytes
		local BLOCK_START = Allocate(12)
		local Vector = Value2
		buffer.writef32(SendBuffer, BLOCK_START + 0, Vector.X)
		buffer.writef32(SendBuffer, BLOCK_START + 4, Vector.Y)
		buffer.writef32(SendBuffer, BLOCK_START + 8, Vector.Z)
	end
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	Viewer = {
		Request = {
			Fire = NOOP
		},
		Watch = {
			On = NOOP
		},
		Screen = {
			On = NOOP
		},
		ViewportSize = {
			On = NOOP
		},
		MouseIcon = {
			On = NOOP
		},
	},
	Streamer = {
		Request = {
			On = NOOP
		},
		Screen = {
			Fire = NOOP
		},
		MouseIcon = {
			Fire = NOOP
		},
		MouseTarget = {
			Fire = NOOP
		},
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			local Value: ("StartWatch" | "EndWatch") = Viewer_ReadEVENT_Watch()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Value)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"Watch\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Value} :: {any})
			end
		elseif Index == 2 then
			local Value1: number, Value2: number = Viewer_ReadEVENT_ViewportSize()
			if #Events.Reliable[2] > 0 then
				for _, Listener in Events.Reliable[2] do
					Listener(Value1, Value2)
				end
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"ViewportSize\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value1, Value2} :: {any})
			end
		elseif Index == 3 then
			local Value1: string = Viewer_ReadEVENT_MouseIcon()
			if #Events.Reliable[3] > 0 then
				for _, Listener in Events.Reliable[3] do
					Listener(Value1)
				end
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"MouseIcon\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value1} :: {any})
			end
		elseif Index == 4 then
			local Value: ("StartStream" | "EndStream") = Streamer_ReadEVENT_Request()
			if Events.Reliable[4] ~= nil then
				Events.Reliable[4](Value)
			else
				if #Queue.Reliable[4] > 256 then
					warn("[Blink]: Event queue of \"Request\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[4], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value1: number, Value2: CFrame, Value3: Vector3 = Viewer_ReadEVENT_Screen()
			for _, Listener in Events.Unreliable[0] do
				Listener(Value1, Value2, Value3)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	Viewer = {
		Request = {
			Fire = function(Value: { Action: "View", Player: Player } | { Action: "Leave",  }): ()
				Viewer_WriteEVENT_Request(Value)
			end
		},
		Watch = {
			On = function(Listener: (Value: ("StartWatch" | "EndWatch")) -> ()): () -> ()
				Events.Reliable[1] = Listener
				for Index, Arguments in Queue.Reliable[1] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[1] = {}
				return function (): ()
					if Events.Reliable[1] == Listener then
						Events.Reliable[1] = nil
					end
				end
			end
		},
		Screen = {
			On = function(Listener: (Value1: number, Value2: CFrame, Value3: Vector3) -> ()): () -> ()
				table.insert(Events.Unreliable[0], Listener)
				return function (): ()
					local Index = table.find(Events.Unreliable[0], Listener)
					if Index ~= nil then
						table.remove(Events.Unreliable[0], Index)
					end
				end
			end
		},
		ViewportSize = {
			On = function(Listener: (Value1: number, Value2: number) -> ()): () -> ()
				table.insert(Events.Reliable[2], Listener)
				for Index, Arguments in Queue.Reliable[2] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[2] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[2], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[2], Index)
					end
				end
			end
		},
		MouseIcon = {
			On = function(Listener: (Value1: string) -> ()): () -> ()
				table.insert(Events.Reliable[3], Listener)
				for Index, Arguments in Queue.Reliable[3] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[3] = {}
				return function (): ()
					local Index = table.find(Events.Reliable[3], Listener)
					if Index ~= nil then
						table.remove(Events.Reliable[3], Index)
					end
				end
			end
		},
	},
	Streamer = {
		Request = {
			On = function(Listener: (Value: ("StartStream" | "EndStream")) -> ()): () -> ()
				Events.Reliable[4] = Listener
				for Index, Arguments in Queue.Reliable[4] do
					Listener(table.unpack(Arguments))
				end
				Queue.Reliable[4] = {}
				return function (): ()
					if Events.Reliable[4] == Listener then
						Events.Reliable[4] = nil
					end
				end
			end
		},
		Screen = {
			Fire = function(Value1: number, Value2: CFrame, Value3: Vector3): ()
				local Previous = Save()
				Load()
				Streamer_WriteEVENT_Screen(Value1, Value2, Value3)
				local Buffer = buffer.create(SendCursor)
				buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
				Unreliable:FireServer(Buffer, SendInstances)
				Load(Previous)
			end
		},
		MouseIcon = {
			Fire = function(Value1: string): ()
				Streamer_WriteEVENT_MouseIcon(Value1)
			end
		},
		MouseTarget = {
			Fire = function(Value1: BasePart?, Value2: Vector3?): ()
				Streamer_WriteEVENT_MouseTarget(Value1, Value2)
			end
		},
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL